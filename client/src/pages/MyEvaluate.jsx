import React, { useContext, createContext, useEffect, useState } from "react";
import { toast } from "react-toastify";
import customFetch from "../utils/customFetch.js";
import { useLoaderData, useNavigate } from "react-router-dom";
import AllHeader from "../assets/components/AllHeader.jsx";

export const loader = async ({ request }) => {
  const params = Object.fromEntries([...new URL(request.url).searchParams.entries()]);
  try {
    const { data } = await customFetch.get("/allusers", { params });
    return { data, searchValues: { ...params } };
  } catch (error) {
    toast.error(error?.response?.data?.msg || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ");
    return { data: [], searchValues: {} };
  }
};

const MyEvaluateContext = createContext();

const MyEvaluate = () => {
    const { data } = useLoaderData();
    const navigate = useNavigate();
    
    const [doctorId, setDoctorId] = useState(null);
    const [doctorFeedbacks, setDoctorFeedbacks] = useState([]); // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Feedback ‡∏Ç‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState(null);

    // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å (‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô)
    const currentMonth = new Date().toISOString().slice(0, 7); // "YYYY-MM"
    const [selectedMonth, setSelectedMonth] = useState(currentMonth);

    // ‚úÖ ‡∏î‡∏∂‡∏á `doctor_id` ‡∏Ç‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    useEffect(() => {
        const fetchDoctorId = async () => {
            try {
                console.log("‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏≠‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô...");
                const response = await customFetch.get("/doctors/me");
                console.log("üîç Doctor API Response:", response.data);

                if (response.data?.doctor?._id) {
                    setDoctorId(response.data.doctor._id);
                    console.log("‚úÖ Doctor ID:", response.data.doctor._id);
                } else {
                    toast.error("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡∏ó‡∏¢‡πå");
                    setError("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡∏ó‡∏¢‡πå");
                }
            } catch (error) {
                console.error("‚ùå Error fetching doctor ID:", error);
                toast.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ");
                setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô‡πÑ‡∏î‡πâ");
            }
        };

        fetchDoctorId();
    }, []);

    // ‚úÖ ‡∏î‡∏∂‡∏á Feedbacks ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏≠‡∏ó‡∏µ‡πà‡∏•‡πá‡∏≠‡∏Å‡∏≠‡∏¥‡∏ô
    useEffect(() => {
        if (!doctorId || !selectedMonth) return;
      
        console.log("üì• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö:");
        console.log("üìÜ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:", selectedMonth);
        console.log("üë®‚Äç‚öïÔ∏è ‡∏´‡∏°‡∏≠:", doctorId);
      
        const fetchDoctorFeedbacks = async () => {
          try {
            const url = `feedbacks/doctor-feedbacks?doctor_id=${doctorId}&month=${selectedMonth}`;
            console.log("üåê ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API URL:", url);
      
            const response = await customFetch.get("feedbacks/doctor-feedbacks", {
              params: { doctor_id: doctorId, month: selectedMonth },
            });
      
            console.log("‚úÖ ‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• feedback:", response.data.feedbacks);
            setDoctorFeedbacks(response.data.feedbacks || []);
            setError(null);
          } catch (error) {
            console.error("‚ùå Error fetching doctor feedbacks:", error);
            toast.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô");
            setError("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô");
          } finally {
            setLoading(false);
          }
        };
      
        fetchDoctorFeedbacks();
      }, [doctorId, selectedMonth]);
       // ‚úÖ ‡∏Ñ‡πà‡∏≤ selectedMonth ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô ‡∏Ñ‡∏ß‡∏£‡∏ó‡∏≥‡πÉ‡∏´‡πâ useEffect ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
    

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á 12 ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô)
    const getMonthOptions = () => {
        const months = [];
        const today = new Date();
        for (let i = 0; i < 12; i++) {
            const date = new Date(Date.UTC(today.getUTCFullYear(), today.getUTCMonth() - i, 1));
            const year = date.getUTCFullYear();
            const month = String(date.getUTCMonth() + 1).padStart(2, "0"); // ‡∏ö‡∏ß‡∏Å 1 ‡πÄ‡∏û‡∏£‡∏≤‡∏∞ getUTCMonth() ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà 0
            const value = `${year}-${month}`;
    
            console.log(`üìÖ ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (UTC): ${value}`);
    
            const label = date.toLocaleString("th-TH", { year: "numeric", month: "long" });
            months.push({ value, label });
        }
        return months;
    };
    
    
    return (
        <MyEvaluateContext.Provider value={{ data, selectedMonth, setSelectedMonth, doctorFeedbacks }}>

            {/* ‚úÖ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡πÅ‡∏û‡∏ó‡∏¢‡πå */}
                          <AllHeader>‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ç‡∏≠‡∏á‡∏â‡∏±‡∏ô</AllHeader>
              

                {/* ‚úÖ Dropdown ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô */}
                <div className="flex items-center space-x-3 mt-10 mb-10">
                <label className="text-base text-gray-700">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô:</label>                    <select
  value={selectedMonth}
  onChange={(e) => {
    const newMonth = e.target.value;
    console.log(`üìå ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô: ${newMonth}`);
    setSelectedMonth(newMonth);
    setLoading(true); // üëà ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ useEffect ‡∏£‡∏π‡πâ‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà
  }}
  className="border p-3 rounded"
>

    {getMonthOptions().map((month) => (
        <option key={month.value} value={month.value}>
            {month.label}
        </option>
    ))}
</select>

                </div>

                {loading ? (
                    <p className="text-center text-lg text-gray-600">‚è≥ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
                ) : doctorFeedbacks.length > 0 ? (
                    doctorFeedbacks.map((feedback, index) => (
                        <div key={feedback._id}   className="border border-gray-200 p-4 mb-4 rounded-xl bg-white shadow-sm transition duration-200 hover:shadow-md"
                        >
                             <div className="text-base text-gray-800 mb-2">
                                {index + 1}. ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏õ‡πà‡∏ß‡∏¢: {feedback.user_id.name} {feedback.user_id.surname}
                            </div>
                             
                            <div className="text-sm text-gray-700 mb-1">
  ‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô:{" "}
  <span
    className={
      feedback.feedback_type === "‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏î‡∏µ"
        ? "text-green-600 font-medium"
        : "text-orange-500 font-medium"
    }
  >
    {feedback.feedback_type}
  </span>
</div>
                                <div className="text-sm text-gray-600 mt-2">
                                ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡πÅ‡∏û‡∏ó‡∏¢‡πå: {feedback.doctor_response || "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô"}
                                </div>
                                <div className="text-sm text-gray-500 mb-1 mt-3">
                                ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö: {new Date(feedback.createdAt).toLocaleDateString("th-TH")}
                                </div>
                        </div>
                    ))
                ) : (
                    <p className="text-center text-lg text-gray-600">‚ö†Ô∏è ‡∏Ñ‡∏∏‡∏ì‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô</p>
                )}
          
        </MyEvaluateContext.Provider>
    );
};

export const useMyEvaluateContext = () => useContext(MyEvaluateContext);
export default MyEvaluate;