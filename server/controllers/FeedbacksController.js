import { StatusCodes } from "http-status-codes";
import FeedbacksModel from "../models/FeedbacksModel.js";
import Doctor from "../models/DoctorModel.js"; // Import Doctor model
import mongoose from "mongoose";

export const save = async (req, res) => {
  try {
    const {
      user_id,
      doctor_response,
      feedback_type,
      evaluation_date,
      doctor_id,
    } = req.body;

    if (!user_id || !doctor_response || !feedback_type || !doctor_id) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô" });
    }

    const newFeedback = new FeedbacksModel({
      user_id,
      doctor_response,
      feedback_type,
      evaluation_date,
      doctor_id,
    });

    await newFeedback.save();

    res
      .status(201)
      .json({ message: "‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å feedback ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!", feedback: newFeedback });
  } catch (error) {
    res
      .status(500)
      .json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", details: error });
  }
};

// export const getFeedbackByDateAndId = async (req, res) => {
//     try {
//         const { id, date } = req.body;

//         if (!id || !date) {
//             return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ID ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" });
//         }

//         // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Feedback ‡∏ó‡∏µ‡πà‡∏°‡∏µ doctor_id ‡πÅ‡∏•‡∏∞ user_id
//         const evaluations = await FeedbacksModel.find({ user_id: id, evaluation_date: date })
//             .populate("user_id", "username name surname email") // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
//             .lean(); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Plain Object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢

//         if (evaluations.length === 0) {
//             return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Feedback ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" });
//         }

//         // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
//         const doctorIds = [...new Set(evaluations.map(e => e.doctor_id.toString()))]; // ‡πÄ‡∏≠‡∏≤ doctor_id ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
//         const doctors = await Doctor.find({ _id: { $in: doctorIds } }).lean(); // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î

//         console.log("Doctors:", doctors);

//         const doctorMap = doctors.reduce((acc, doctor) => {
//             acc[doctor._id.toString()] = doctor;
//             return acc;
//         }, {}); // ‚úÖ Map ‡∏´‡∏°‡∏≠‡πÄ‡∏õ‡πá‡∏ô Object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÄ‡∏£‡πá‡∏ß‡∏Ç‡∏∂‡πâ‡∏ô

//         // ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• `doctor_details` ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ `evaluation`
//         const formattedEvaluations = evaluations.map(evaluation => ({
//             ...evaluation,
//             doctor_details: doctorMap[evaluation.doctor_id.toString()] || null, // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏≠‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤
//             user_details: evaluation.user_id, // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà populate ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
//             doctor_id: undefined, // ‚úÖ ‡∏•‡∏ö doctor_id ‡πÄ‡∏î‡∏¥‡∏°
//             user_id: undefined // ‚úÖ ‡∏•‡∏ö user_id ‡πÄ‡∏î‡∏¥‡∏°
//         }));

//         res.status(200).json(formattedEvaluations);

//     } catch (error) {
//         console.error("Error fetching feedback:", error);
//         res.status(500).json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", details: error.message });
//     }
// };

export const getFeedbackByDateAndId = async (req, res) => {
  try {
    const { id, date } = req.body;

    if (!id || !date) {
      return res.status(400).json({ error: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ ID ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà" });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Feedback ‡∏ó‡∏µ‡πà‡∏°‡∏µ doctor_id ‡πÅ‡∏•‡∏∞ user_id
    const evaluations = await FeedbacksModel.find({
      user_id: id,
      evaluation_date: date,
    })
      .populate("user_id", "username name surname email") // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      .lean(); // ‚úÖ ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô Plain Object ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢

    if (evaluations.length === 0) {
      return res.status(404).json({ message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Feedback ‡πÉ‡∏ô‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ" });
    }

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏≠‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏â‡∏û‡∏≤‡∏∞ `nametitle`, `name`, `surname`
    const doctorIds = [
      ...new Set(evaluations.map((e) => e.doctor_id.toString())),
    ]; // ‡πÄ‡∏≠‡∏≤ doctor_id ‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ã‡πâ‡∏≥‡∏Å‡∏±‡∏ô
    const doctors = await Doctor.find({ _id: { $in: doctorIds } })
      .select("nametitle name surname") // ‚úÖ ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ 3 ‡∏ü‡∏¥‡∏•‡∏î‡πå
      .lean();

    // ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á Map ‡∏Ç‡∏≠‡∏á‡∏´‡∏°‡∏≠ (key = doctor_id, value = "‡∏ô‡∏û. John Doe")
    const doctorMap = doctors.reduce((acc, doctor) => {
      acc[
        doctor._id.toString()
      ] = `${doctor.nametitle} ${doctor.name} ${doctor.surname}`; // ‚úÖ ‡∏£‡∏ß‡∏°‡πÄ‡∏õ‡πá‡∏ô String
      return acc;
    }, {});

    // ‚úÖ ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• `doctor_details` ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞ `evaluation`
    const formattedEvaluations = evaluations.map((evaluation) => ({
      ...evaluation,
      doctor_details:
        doctorMap[evaluation.doctor_id.toString()] || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏°‡∏≠", // ‚úÖ ‡πÉ‡∏ä‡πâ String
      user_details: evaluation.user_id, // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ó‡∏µ‡πà populate ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
      doctor_id: undefined, // ‚úÖ ‡∏•‡∏ö doctor_id ‡πÄ‡∏î‡∏¥‡∏°
      user_id: undefined, // ‚úÖ ‡∏•‡∏ö user_id ‡πÄ‡∏î‡∏¥‡∏°
    }));

    res.status(200).json(formattedEvaluations);
  } catch (error) {
    console.error("Error fetching feedback:", error);
    res
      .status(500)
      .json({ error: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•", details: error.message });
  }
};


export const getFeedbacksByDoctorId = async (req, res) => {
  try {
    const { doctor_id, month } = req.query;

    if (!doctor_id) {
      return res
        .status(StatusCodes.BAD_REQUEST)
        .json({ message: "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ doctor_id" });
    }

    if (!mongoose.Types.ObjectId.isValid(doctor_id)) {
      return res
        .status(StatusCodes.BAD_REQUEST)
        .json({ message: "doctor_id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á" });
    }

    const query = { doctor_id: new mongoose.Types.ObjectId(doctor_id) };

    // ‚úÖ Filter ‡∏ï‡∏≤‡∏°‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    if (month) {
      const [year, monthIndex] = month.split("-").map(Number); // monthIndex ‡πÄ‡∏õ‡πá‡∏ô 1-based (1=Jan)
      const startOfMonth = new Date(Date.UTC(year, monthIndex - 1, 1, 0, 0, 0, 0));
      const endOfMonth = new Date(Date.UTC(year, monthIndex, 0, 23, 59, 59, 999)); // ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà 0 ‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏Ñ‡∏∑‡∏≠‡∏ß‡∏±‡∏ô‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡∏ô‡∏µ‡πâ
    
      query.createdAt = { $gte: startOfMonth, $lte: endOfMonth };
    }
    

    // ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• feedback ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏ô‡πÑ‡∏Ç‡πâ
    const feedbacks = await FeedbacksModel.find(query)
    .populate("user_id", "name surname")
    .lean();
  
  
    if (!feedbacks.length) {
      return res.status(StatusCodes.OK).json({
        message: "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô",
        feedbacks: [],
      });
    }

    // ‚úÖ ‡∏à‡∏±‡∏î format ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ô‡∏≥‡πÑ‡∏õ‡πÉ‡∏ä‡πâ‡∏ö‡∏ô frontend ‡πÑ‡∏î‡πâ‡∏á‡πà‡∏≤‡∏¢
    const formatted = feedbacks.map((fb) => ({
      _id: fb._id,
      doctor_response: fb.doctor_response,
      feedback_type: fb.feedback_type,
      evaluation_date: fb.evaluation_date,
      createdAt: fb.createdAt,
      patient_details: fb.user_id
        ? {
            name: fb.user_id.name || fb.user_id.username || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠",
            surname: fb.user_id.surname || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠",
            fullName: `${fb.user_id.name || "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∑‡πà‡∏≠"} ${fb.user_id.surname || ""}`.trim(),
          }
        : null, // ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ user_id ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô null
    }));
    

    console.log("üìå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• feedbacks ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ frontend:", formatted);
    
    return res.status(StatusCodes.OK).json({ feedbacks: formatted });
    
  } catch (error) {
    console.error("‚ùå Error fetching feedbacks by doctor:", error);
    res.status(StatusCodes.INTERNAL_SERVER_ERROR).json({
      message: "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•",
      error: error.message,
    });
  }
};

